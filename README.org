#+TITLE:	@<img src="./rFSM\_logo.jpg" width="50%" height="50%" title="rFSM Statecharts" alt="rFSM Statecharts" /@> @<br/@>@<br/@>v1.0-beta3
#+AUTHOR:	Markus Klotzbuecher
#+EMAIL:	markus.klotzbuecher@mech.kuleuven.be
#+DATE:		[2011-10-31 Mon]
#+DESCRIPTION:  Documentation of rFSM Statecharts.
#+KEYWORDS:	Coordination, Statcharts, Robotics, Real-Time, Lua,
#+LANGUAGE:	en
#+OPTIONS:	H:3 num:t toc:t \n:nil @:t ::t |:t ^:f -:t f:t *:t <:t
#+OPTIONS:	TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT:	view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:
#+STYLE:	<link rel="stylesheet" type="text/css" href="css/stylesheet.css" />

#+STARTUP:	showall
#+STARTUP:	hidestars

* Overview

  rFSM is a small and powerful Statechart implementation. It was
  mainly designed for /Coordinating/ of complex systems but is not
  limited to that. rFSM is written in pure Lua and is therefore highly
  portable and embeddable. As a Lua domain specific language rFSM
  inherits the extensibility of its host language.

  rFSM is dual licensed under LGPL/BSD.

  This README is also available in HTML and Text format in the doc/
  subdirectory.

* Setup

  Make sure you have Lua 5.1 installed and the rFSM folder is in your
  =LUA\_PATH=. For example:

  #+begin_src sh
    export LUA_PATH=";;;/home/mk/src/git/rfsm/?.lua"
  #+end_src

  If your =LUA\_PATH= is already set to something, then just add the
  rFSM path instead of overwriting it:

  #+begin_src sh
    export LUA_PATH="$LUA_PATH;/home/mk/src/git/rfsm/?.lua"
  #+end_src

* Quickstart

  1. define an rfsm state machine (see =examples/hello\_world.lua=)
  2. define a context script to execute it (see =examples/runscript.lua=)
  3. run it
     #+begin_src sh
       lua examples/runscript.lua
       INFO: created undeclared connector root.initial
       hello
       world
       hello
       world
     #+end_src

* Introduction

  rFSM is minimal Statechart flavour designed for /Coordinating/ of
  complex systems such as robots. It has the following features:

  - hierarchical (composite) states
  - completion events
  - States can be parametrized and reused
  - It is easy to build statemachines by composing existing
    states/state machines.
  - Plugin mechanism permits extending the core engine. Available
    plugins include timeevents, event memory, sequential AND states
    and more.
  - real-time safe operation possible using lua-tlsf

  The following shows a simple hello\_world example

  #+begin_src ditaa :file example1.png :cmdline -o

    /-----------------------------------------\
    |       /---------\  e_done   /---------\ |
    | *---> |  hello  | --------> |  world  | |
    |       \---------/           \---------/ |
    |           ^                      |      |
    |           |      e_restart       |      |
    | cDEF      +----------------------+      |
    \-----------------------------------------/

  #+end_src

  #+results:
  [[file:example1.png]]

  #+begin_src lua -n -r
    return rfsm.composite_state { (ref:hello_fsm_root)
       hello = rfsm.simple_state { exit=function() print("hello") end }, (ref:hello_fsm_hello)
       world = rfsm.simple_state { entry=function() print("world") end }, (ref:hello_fsm_world)

       rfsm.transition { src='initial', tgt='hello' }, (ref:hello_fsm_trans_ini)
       rfsm.transition { src='hello', tgt='world', events={ 'e_done' } }, (ref:hello_fsm_e_done)
       rfsm.transition { src='world', tgt='hello', events={ 'e_restart' } }, (ref:hello_fsm_e_restart)
    }
  #+end_src

  The [[(hello_fsm_root)][first line]] defines a new toplevel composite state and returns
  it. The root state of an rFSM state machine is always a composite
  state. This permits it to be composed as a substate in a different
  state machine.. The =return= statement facilitates reading by tools
  or other state machines.

  The [[(hello_fsm_hello)][second]] and [[(hello_fsm_world)][third]] line define two simple states which are part of
  the toplevel composite state. =hello= defines an exit function and
  world an entry function which are called when the state is
  exited/entered resp.

  The next three lines define transition between these states. The
  [[(hello_fsm_trans_ini)][first]] is from the initial connector to the =hello= state. This
  transition will be taken the first time the composite state is
  entered. The initial connector, as an exception, need not be defined
  and will be created automatically.

  The [[(hello_fsm_e_done)][next transition]] is from =hello= to =world= and is triggered by
  the =e\_done= event. This event is raised internally when a state
  completes, which is either the case when the states 'doo' function
  (see below) finishes or immediately, if there is no =doo=, as is the
  case here. The [[(hello_fsm_e_restart)][third transition]] is triggered by the =e\_restart=
  event.

  Next we execute this statemachine in the rfsm-simulator:

  #+begin_src sh
    PMA-10-048 ~/prog/lua/rfsm(master) $ tools/rfsm-sim examples/hello_world.lua
    Lua 5.1.4  Copyright (C) 1994-2008 Lua.org, PUC-Rio
    rFSM simulator v0.1, type 'help()' to list available commands
    INFO: created undeclared connector root.initial
    > step()
    hello
    active: root.hello(done)
    queue:  e_done@root.hello
  #+end_src

  We execute =step()= to advance the state machine once. As this is
  the first step, the fsm is entered via the 'initial' connector to
  the =hello= state. After that the state =hello= is active and =done=
  (because no =doo= function is defined). Consequently, an =e\_done=
  completion event has been generated which is in the queue. So the
  next step...

  #+begin_src sh
    > step()
    world
    active: root.world(done)
    queue:  e_done@root.world
  #+end_src

  ... causes a transition to =world=. As the =world= state completion
  event does not trigger any transitons, running =step()= again does
  not cause any changes:

  #+begin_src sh
    > step()
    active: root.world(done)
    queue:
  #+end_src

  But we can manually send in the =e\_restart= event and call =step()=,
  which takes us back to =hello=:

  #+begin_src sh
    > se("e_restart")
    > step()
    hello
    active: root.hello(done)
    queue:  e_done@root.hello
  #+end_src


* Specifying rFSM models

  rFSM state machines are built using the following four model
  elements: *composite\_state*, *simple\_state*, *connector* and
  *transition*.

  (all functions are part of the rfsm module, thus need to be called
  in Lua with the =rfsm= prefix, e.g. =rfsm.simple\_state{}=)

** States (=rfsm.composite_state= and =rfsm.simple_state=)

   States can be either composite (=composite\_state= or =csta=) or
   simple (=simple\_state= or =sista=). While composite states may
   contain other composite or simple states, simple states are
   "leaves" of the FSM tree and can not contain any subtypes. Both
   simple and composite states may define =entry= and =exit= functions:

   #+begin_src lua
       entry(fsm, state, 'entry')
       exit(fsm, state, 'exit')
   #+end_src

   that are called when the state is entered or exited
   respectively. The arguments passed in are the toplevel statechart,
   the current state and the string 'entry' resp. 'exit'. Normally
   you don't need these arguments and should not change them
   either. (The rationale behind the second and third argument is to
   permit one function to handle entry and exit of multiple states
   and hence needs to identify these).

*** The doo function

    Simple states may additionaly define a do function (it is called
    =doo= in rFSM to avoid clashes with the identically named Lua
    keyword).
    
    #+begin_src lua
	bool doo(fsm, state, 'doo')
    #+end_src

    The doo function is used to perform actions /while/ a simple state
    is active. Therefore it can be used such that it is repeatedly
    called until either the function completes or an event triggers a
    transition to a different state.

    Implementationwise, this function is treated as a Lua
    coroutine. This enables the following two use-cases:

     1. =doo= is a regular function: =doo= is excuted once and a
	completion event =e\_done= is raised afterwards (if no =doo=
	function is defined this event is raised immediately after
	execution of the =entry= function).

     2. long running =doo= with voluntary preemption: While possible,
        it is not recommended to define a =doo= function that runs for
        a longer time because this would prevent incoming events to
        trigger transitions. Therefore, the =rfsm.yield()= call can be
        inserted at appropriate points into a long running =doo= to
        explicitely return control to the rfsm engine, that then can
        check for new events and execute transitions.

    (Note: rfsm.yield is currently only an alias to =coroutine.yield=)

    The following example illustrates the second use case:

    #+begin_src lua
	doo = function(fsm)
		 while true do
		    if min_distance() < 0.1 then
		       rfsm.send_events(fsm, "e_close_obj")
		    end
		    rfsm.yield()
		 end
	      end
    #+end_src

    This =doo= will check a certain condition repeatedly and raise
    an event if it is true. After that control is returned to the
    rFSM core.

    =rfsm.yield(idle_flag)= accepts a boolean argument (called the
    "idle flag") to influence the =doo= execution behavior by the rFSM
    core: if true it will cause the rFSM core to go idle if there are
    no other events. If false (the default if no argument given) and
    there are no other events, =doo= will be called in a tight
    loop. It depends on the application which idle_flag is
    appropriate. In general the idle_flag should only be true if the
    intention is that the =doo= function is executed as fast as
    possible, as this mode will consume a lot of CPU!

*** Particularities of the root composite state

    The root composite state allows some extra fields to define the
    global fsm behavior.
    
    *Configuring error, warning, informational and debug output.* The
    =err=, =warn=, =info= and =dbg= fields can be used to fine tune
    how these messages are output. The value of these fields can be
    either true or false or set to a function that accepts a variable
    list of arguments. The default is to write errors and warnings to
    stderr and info to stdout. Debug messages are turned off by
    default. Nicer and configurable pretty printing of debug output is
    provided by the =fsmpp= module (described below).

    *The* =getevents= *hook.* The =getevents= hook is called by the
    rFSM core whenever it needs to check for new events. This function
    is the central mechanism to integrate rFSM into existing
    systems. The expected behavior is to return a Lua table of events
    (array part only). These events are then used to check for enabled
    transtions.
    
** Transitions (=rfsm.transition=)

   Transitions define how a state machine changes state upon receiving
   events:

   Example:

   #+begin_src lua
   rfsm.transition { 
       src='stateX', tgt='stateY', events = {"e1", "e2" },
       guard=function() 
                 if getVal() > 0.3 then
                     return false
                 end
                 return true
             end,
       effect=function () do_this() end
   }
   #+end_src

   The above defines a transition between stateX and stateY which is
   triggered by the events =e1= _and_ =e2=. The =guard= condition
   (optional) will prevent the transition from being executed if it
   returns false. The =effect= function (optional) will be executed
   during the transitioning of the function. If no events are
   specified this is interpreted as *any* events will trigger the
   transition.
   
   Three ways of specifying =src= and =target= states are supported:
   /local/, /relative/ or /absolute/. In the above example =stateX=
   and =stateY= are referenced locally and must therefore be defined
   within the same composite state as the transition.

   Relative references specify states which are, relative to the
   position of the transition, more deeply nested. Such a reference
   starts with a leading dot. For example:

   #+begin_src lua -r
       return rfsm.csta{
	  operational=rfsm.csta{
	     motors_on = rfsm.csta{
		moving = rfsm.sista{},
		stopped = rfsm.sista{},
                rfsm.trans{src='initial', tgt='stopped'},
	     },
             rfsm.trans{src='initial', tgt='motors_on'},
	  },
	  off=rfsm.sista{},
	  rfsm.trans{src='initial', tgt=".operational.motors_on.moving" }                (ref:trans_ref_types_one)
	  rfsm.trans{src=".operational.motors_on.stopped", tgt='off', events={'e_off'} } (ref:trans_ref_types_two)
       }
   #+end_src

   The [[(trans_ref_types_one)][first]] transition is defined between the (locally referenced)
   =initial= connector to the relatively referenced =moving=
   state. This permits to /refine/ the default behavior of the
   operational state, namely entering =motors_on.stopped= (due to the
   initial connectors), to instead enter the =motors_on.moving= state.

   The [[(trans_ref_types_two)][second]] transition defines a transition from the relatively
   referenced =operational.motors_on.stopped= to =off=. Here the
   intention is to constrain the states from which one can reach the
   =off= state: turning the device off is only permitted if it is not
   moving.

   At last absolute references begin with "root." Using absolute
   syntax is strongly discouraged for anything other than testing,
   as it breaks compositionality: if a state machine is used within
   a larger statemachine the absolute reference is broken.

   Furthermore, transitions support so called *priority
   numbers*. Priority numbers serve to resolve conflicts within one
   hierarchical level. In case two transitions are enabled by a set of
   events, the transition with the higher priority number will be
   executed. Priority numbers are defined with the =pn= keyword on
   transitions, as shown below. Transitions without priority numbers
   are assumed to have priority 0.

   #+begin_src lua
     rfsm.trans{ src='following', tgt='hitting', pn=10, events={ 't6' } },
   #+end_src

   If possible, statecharts should be designed not to depend on
   priority numbers and introduce these rather as an optimization.

** Connector (=rfsm.connector=)

   Connectors permit to define so called compound transitions by
   chaining multiple transition segments together. Connectors are
   similar to the UML junction element. Compound transitions are
   statically evaluated, meaning that the compound transition is only
   executed if each subtransition is enabled (events match and guards
   are true).

   See the examples =connector\_simple.lua= and
   =connector\_split.lua=.

   Connectors are useful for defining interfaces (entry and exit
   points) that hide internals of a composite state. The following
   example defines a error handling state:
   #+begin_src lua -n -r
   return rfsm.csta{
     software_err = rfsm.sista{},
     hardware_err = rfsm.sista{},

     initial = rfsm.conn{},     -- not necessary, 'initial' is created automatically
     recovered = rfsm.conn{},
     failed = rfsm.conn{},

     rfsm.trans{src='initial', tgt='software_err', events={'e_sw_err'}},      (ref:conn_dispatch_dispatch1)
     rfsm.trans{src='initial', tgt='hardware_err', events={'e_hw_err'}},      (ref:conn_dispatch_dispatch2)

     rfsm.trans{src='software_err', tgt='recovered', events={'e_recovered'}}, (ref:conn_dispatch_accept1)
     rfsm.trans{src='hardware_err', tgt='recovered', events={'e_recovered'}}, (ref:conn_dispatch_accept2)
     rfsm.trans{src='software_err', tgt='failed', events={'e_failed'}},        (ref:conn_dispatch_accept3)
     rfsm.trans{src='hardware_err', tgt='failed', events={'e_failed'}},       (ref:conn_dispatch_accept4)
   }
   #+end_src

   Transitions [[(conn_dispatch_dispatch1)][1]] and [[(conn_dispatch_dispatch2)][2]] dispatch to different error handling states
   based on the events received. Transitions [[(conn_dispatch_accept1)][3]], [[(conn_dispatch_accept2)][4]], [[(conn_dispatch_accept3)][5]] and [[(conn_dispatch_accept4)][6]] connect the
   states to different exit connectors based on the events they
   generate.

   /Note/: defining cycles is possible, but dangerous, unsupported and
   discouraged. It may make the yoghurt in your fridge grow fine grey
   beards.


* Executing rFSM models

  Before running a statemachine must be initalized. This serves to
  validate the fsm model and transform the fsm to be suitable for
  execution. Initalization is done using the =rfsm.init(fsm)=
  function, that takes a (string) rfsm description as input and
  returns an initalized fsm. To load an rfsm from a file and initalize
  it, the =rfsm.load(filename)= function can be used:

  #+begin_src lua
    fsm = rfsm.init(rfsm.load("fsm.lua"))
  #+end_src

  If the return value from =rfsm.init= is not =false=, initalization
  succeeded and the returned fsm can be run.

  The function =rfsm.step(fsm, n)= will attempt to step the given fsm
  for a maximum of =n= times. A /step/ can be either the execution of
  a transition _or_ a single execution of the =doo= program. =step=
  will return either when the state machine is /idle/ _or_ the given
  number of steps has been reached. The boolean return value indicates
  whether the fsm is idle (=true=) or the maximum amount of requested
  steps was reached (=false=).

  For each step the rfsm engine will invoke the =getevents= hook to
  retrieve new events and then reason about what to do ( which
  transition to execute or =doo='s to run).

  When ommitted, the number of steps argument =n= to =rfsm.step=
  defaults to *1*.

  =rfsm.run(fsm)= calls =step= as long as the given fsm is not
  idle. Not idle means: there are either events in the queue or there
  is an active =doo= function that is _not_ idle.

  To directly send events to the fsm the function
  =rfsm.send_events(fsm, e1, e2, ...)= can be used. The first argument
  is the fsm to which all subsequent event arguments are sent to.

* API Summary
** State specification

   Functions to define rFSM:

   | *Function*           | *Short alias* | *Description*            |
   |----------------------+---------------+--------------------------|
   | =simple\_state{}=    | =sista{}=     | create a simple state    |
   | =composite\_state{}= | =csta{}=      | create a composite state |
   | =connector{}=        | =conn{}=      | create a connector       |
   | =transition{}=       | =trans{}=     | create a transition      |

  

** Operational functions
   
   | *Function*                    | *Description*                                        |
   |-------------------------------+------------------------------------------------------|
   | =fsm rfsm.init(fsmmodel)=     | create an inialized rfsm instance from model         |
   | =idle rfsm.step(fsm, n)=      | attempt to transition FSM n times. Default: once     |
   | =rfsm.run(fsm)=               | run FSM until it goes idle                           |
   | =rfsm.send\_events(fsm, ...)= | send one or more events to internal rfsm event queue |


** Hooks

   The following hook functions can be defined for a toplevel
   composite state and allow to refine various behavior of the state
   machine.
   
   | *Function*          | *Description*                                                                    |
   |---------------------+----------------------------------------------------------------------------------|
   | =dbg=               | called to output debug information. Set to false to disable. Default false.      |
   | =info=              | called to output informational messages. Set to false to disable. Default stdout |
   | =warn=              | called to output warnings. Set to false to disable. Default stderr.              |
   | =err=               | called to output errors. Set to false to disable. Default stderr.                |
   | =table getevents()= | function which returns a table of new events which have occurred                 |


   Low level hooks (not for normal use):

   | *Function*             | *Description*                                           |
   |------------------------+---------------------------------------------------------|
   | =pre\_step\_hook(fsm)= | is called for each step (mostly for debugging purposes) |
   | =step\_hook(fsm)=      | called before for each step                             |
   | =idle\_hook(fsm)=      | called *instead* of returning from step/run functions   |


* Common pitfalls

  1. Name clashes between state/connector names with reserved Lua
     keywords.

     This can be worked around by using the following syntax:

     #+begin_src lua
     ['end'] = rfsm.sista{...}
     #+end_src

  2. Executing functions accidentially

     It is a common mistake to execute externally defined functions
     instead of adding references to them:

     #+begin_src lua
     stateX = rfsm.sista{ entry = my_func() }
     #+end_src

     The (likely) mistake above is to execute my\_func and assigning
     the result to entry instead of assigning my\_func:

     #+begin_src lua
     stateX = rfsm.sista{ entry = my_func }
     #+end_src

     Of course the first example would be perfectly valid if
     my\_func() returned a function as a result!

  3. Why doesn't my statemachine react if I send a completion event
     =e\_done= from the outside?

     Short anwer: because it is a syntactic shortcut for the
     completion event *of the source state* of the transition which it
     is defined on. During initalization it is transformed to
     =e\_done@fqn= (e.g. =e\_root@root.stateA.stateB=) If you send in
     the expanded completion event it will work.

     Explanation: a completion event only makes sense in the context
     of a state which completed. Making the state which has completed
     explicit in the event avoids accidentially triggering a
     transition labeled with a higher priority completion event that
     has nothing to do with the current one.

     The same holds true for =rfsm_timeevent= based timeevents.

  4. My FSM is using up 100% CPU, what's wrong?
     
     Most likely you have defined a long running =doo= function that
     does not call =rfsm.yield= with a =true= argument (the idle
     flag). Therefore the rFSM engine calls the =doo= function in a
     tight loop.

* Tools and helper modules

** The event memory extension (=rfsm\_emem= module)

   This extension adds "memory" of occured events to an rFSM
   chart. This is done maintaining a table <code>emem</code> for every
   state. The <code>emem</code> table is cleared when a state is
   exited by setting all values to 0.

   This extension is useful to define transitions that are taken only
   after certain events have occured, but these do not necessarily
   occur within one step. Because the default behavior of rFSM is to
   drop events if nothing can be done, this information is lost.

   To enable event memory, all you need to do is load the =rfsm_emem=
   module. Checkout the =examples/emem_test.lua= for more details.

** Timeevents (=rfsm\_timeevent= module)
   
   This extension adds time events to rFSM. To enable time events,
   load the =rfsm\_timeevent= module. Currently only relative (opposed
   to absolute) timeevents are supported. These can be specified on
   transitions using the following syntax:

   #+begin_src lua
   rfsm.trans{ src='A', tgt='B', events={ 'e_after(0.1)' } },
   #+end_src

   The timeevent will be raised 100ms after state =A= was entered.

   The only requirement of a rfsm_timeevents is that a =gettime=
   function is configured using the
   =rfsm\_timeevent.set\_gettime\_hook(f)= function. This function is
   expected to return the current time in two return values: sec,
   nanosecs.

   An example can be found in =examples/timeevent.lua=

   *Warning:* these timeevents only work while the rfsm engine is
    running and can not magically wake up an idle fsm. Therefore this
    type of timeevents typically only makes sense for fsm that are
    "stepped" at a fixed frequency or that never go idle.


** Configurable and colorized =dbg= info (=fsmpp= module)

   The =fsmpp.gen_dbgcolor= function generates a configurable and
   colorful =dbg= hook.

   Usage:

   #+begin_src lua
     fsmpp.gen_dbgcolor(name, dbgids, defshow)
   #+end_src
     
     - =name= is the (optional) string name to print prefixing the
       debug output
     - =dbgids= is a table that enables or disables certain dbg ids by
       setting them to true or false.
     - =defshow= (bool) defines wether debug id's not mentioned in the dbgids
       table are shown or not.
       	

   Example:

   #+begin_src lua
     fsm = rfsm.init(...)
     fsm.dbg=fsmpp.gen_dbgcolor("my fsm", { STATE_ENTER=true, STATE_EXIT=true }, false)
   #+end_src

   Will show only =STATE_ENTER= and =STATE_EXIT= dbg messages.
     
** Generate graphical representations (=fsm2uml= and =fsm2dbg= modules)
     
     Modules to transform rFSM models to graphical
     descriptions. =fsm2uml= generates classical statechart figures and
     =fsm2tree= generates a tree representation (useful to see check
     priorities).

     Usage: 

     - =fsm2uml.fsm2uml(root\_fsm, format, outfile, caption)=
     - =fsm2tree.fsm2tree(root\_fsm, format, outfile)=

     Examples:

     #+begin_src lua
     require("fsm2uml")
     fsm = rfsm.init(rfsm.load("fsm.lua"))
     fsm2uml.fsm2uml(fsm, 'png', "fsm.png", "Figure caption")
     #+end_src

     or

     #+begin_src lua
     require("fsm2tree")
     fsm = rfsm.init(rfsm.load("fsm.lua"))
     fsm2tree.fsm2tree(fsm, 'png', "fsm-tree.png")
     #+end_src

     The =rfsm-viz= command line uses these modules to generate
     pictures.

** =rfsm-viz=: command line front end to fsm2uml/fsm2tree

     to generate all possible formats run:

     #+begin_src sh
     $ tools/rfsm-viz all examples/composite_nested.lua
     #+end_src

     generates various representations (in =examples/=)

** =rfsm-sim= simple rfsm simulator

     small command line simulator for running a fsm
     interactively.

     #+begin_src sh
     $ tools/rfsm-sim all examples/ball_tracker_scope.lua
     #+end_src

     It requires an image viewer which automatically updates once the
     file displayed changes. For example =evince= works nicely.

** Lua fsm to json conversion (=rfsm2json= command line tool)

   Based on =rfsm2json.lua= module and requires lua-json.

** =rfsm\_rtt= Useful functions for using rFSM with OROCOS rtt
   
   See the Orocos [[http://www.orocos.org/wiki/orocos/toolchain/LuaCookbook][LuaCookbook]] for more details.

* More examples, tips and tricks
** A more complete example

   The graphical model:

   #+begin_src ditaa :file example2.png :cmdline -o

   /-----------------------------------------------------\
   | root                                                |
   |                                                     |
   |        /----------------------------------------\   |
   |        | on                                     |   |
   |        |        *                     c9AC      |   |
   |        |        |                               |   |
   |        |        v                               |   |
   |  *---->|  /------------\ e_stop  /-----------\  |   |
   |  ^     |  |            |-------->|           |  |   |
   |  |     |  |   moving   |         |  waiting  |  |   |
   |  |     |  |            |<--------|           |  |   |
   |  |     |  \------------/ e_start \-----------/  |   |
   |  |     |                                        |   |
   |  |     \----------------------------------------/   |
   |  |                                 ^  |             |
   |  | e_reset           e_error_fixed |  |             |
   |  |                                 |  | e_error     |
   |  |                                 |  v             |
   |  |    /-------------\            /-------\          |
   |  +----| fatal_error |<-----------| error |          |
   |       \-------------/            \-------/          |
   |                      e_fatal_error                  |
   |                                        cDEF         |
   |                                                     |
   \-----------------------------------------------------/

   #+end_src

   ... and the corresponding textual representation:

   #+begin_src lua
     -- any rFSM is always contained in a composite_state
     return rfsm.composite_state {
       	dbg = true, -- enable debugging

       	on = rfsm.composite_state {
	   entry = function () print("disabling brakes") end,
	   exit = function () print("enabling brakes") end,

	   moving = rfsm.simple_state {
	      entry=function () print("starting to move") end,
	      exit=function () print("stopping") end,
	   },

	   waiting = rfsm.simple_state {},

	   -- define some transitions
	   rfsm.trans{ src='initial', tgt='waiting' },
	   rfsm.trans{ src='waiting', tgt='moving', events={ 'e_start' } },
	   rfsm.trans{ src='moving', tgt='waiting', events={ 'e_stop' } },
       	},

       	error = rfsm.simple_state {
	   doo = function (fsm)
		      print ("Error detected - trying to fix")
		      rfsm.yield()
		      math.randomseed( os.time() )
		      rfsm.yield()
		      if math.random(0,100) < 40 then
			 print("unable to fix, raising e_fatal_error")
			 rfsm.send_events(fsm, "e_fatal_error")
		      else
			 print("repair succeeded!")
			 rfsm.send_events(fsm, "e_error_fixed")
		      end
		   end,
       	},

       	fatal_error = rfsm.simple_state {},

       	rfsm.trans{ src='initial', tgt='on', effect=function () print("initalizing system") end },
       	rfsm.trans{ src='on', tgt='error', events={ 'e_error' } },
       	rfsm.trans{ src='error', tgt='on', events={ 'e_error_fixed' } },
       	rfsm.trans{ src='error', tgt='fatal_error', events={ 'e_fatal_error' } },
       	rfsm.trans{ src='fatal_error', tgt='initial', events={ 'e_reset' } },
     }
   #+end_src

** How to compose state machines

   This is easy! Let's assume the state machine is is a file
   "subfsm.lua" and uses the strongly recommended =return
   rfsm.csta ...= syntax, it can be included as follows:

   #+begin_src lua
       	return rfsm.csta {

	   name_of_composite_state = rfsm.load("subfsm.lua"),

	   otherstateX = rfsm.sista{},
	   ...
       	}
   #+end_src

   Make sure not to forget the ',' after the =rfsm.load()= statement!

** Using rfsm with Orocos RTT
   The [[http://www.orocos.org/wiki/orocos/toolchain/LuaCookbook][LuaCookbook]] page describes how to do this.
* Contact

  Please direct questions, bugs or improvements to the [[http://lists.mech.kuleuven.be/mailman/listinfo/orocos-users][orocos-users]]
  mailing list.

* Acknowledgement

  - Funding

    The research leading to these results has received funding from
    the European Community's Seventh Framework Programme
    (FP7/2007-2013) under grant agreement no. FP7-ICT-231940-BRICS
    (Best Practice in Robotics)

  - Scientific background

    This work borrows many ideas from the Statecharts by David Harel
    and some from UML 2.1 State Machines. The following publications
    are the most relevant

    David Harel and Amnon Naamad. 1996. The STATEMATE semantics of
    statecharts. ACM Trans. Softw. Eng. Methodol. 5, 4 (October 1996),
    293-333. DOI=10.1145/235321.235322
    http://doi.acm.org/10.1145/235321.235322

    The OMG UML Specification:
    http://www.omg.org/spec/UML/2.3/Superstructure/PDF/
